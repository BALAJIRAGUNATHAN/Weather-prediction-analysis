# -*- coding: utf-8 -*-
"""Weather Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aRoRhDn09Y7ahzJW9pl1VhzycCw1dYai
"""

import matplotlib.pyplot as plt
import seaborn as sns
import scipy
import re
import warnings
import missingno as mso
from scipy import stats
from scipy.stats import ttest_ind
from scipy.stats import pearsonr
from sklearn.preprocessing import StandardScaler,LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.ensemble import GradientBoostingClassifier
from xgboost import XGBClassifier
from sklearn.metrics import accuracy_score,confusion_matrix,classification_report
import pandas as pd

data=pd.read_csv("/content/seattle-weather.csv")
data.head()

data.shape

import warnings
warnings.filterwarnings('ignore')
sns.countplot(x="weather", data=data, palette='hls')
plt.show()

countrain = len(data[data.weather == 'rain'])
countsun = len(data[data.weather == 'sun'])
countdrizzle = len(data[data.weather == 'drizzle'])
countsnow = len(data[data.weather == 'snow'])
countfog = len(data[data.weather == 'fog'])  # Remove the comma here

total_entries = len(data.weather)

print('percent of rain: {:.6f}%'.format((countrain / total_entries) * 100))
print('percent of sun: {:.6f}%'.format((countsun / total_entries) * 100))
print('percent of drizzle: {:.6f}%'.format((countdrizzle / total_entries) * 100))
print('percent of snow: {:.6f}%'.format((countsnow / total_entries) * 100))
print('percent of fog: {:.6f}%'.format((countfog / total_entries) * 100))

data[['precipitation','temp_max','temp_min','wind']].describe()

sns.set(style='darkgrid')
fig,axs=plt.subplots(2,2,figsize=(10,8))
sns.histplot(data=data,x='precipitation',kde=True,ax=axs[0,0],color='green')
sns.histplot(data=data,x='temp_max',kde=True,ax=axs[0,1],color='red')
sns.histplot(data=data,x='temp_min',kde=True,ax=axs[1,0],color='blue')
sns.histplot(data=data,x='wind',kde=True,ax=axs[1,1],color='orange')

sns.set(style='darkgrid')
fig,axs=plt.subplots(2,2,figsize=(10,8))
sns.violinplot(data=data,x='precipitation',kde=True,ax=axs[0,0],color='green')
sns.violinplot(data=data,x='temp_max',kde=True,ax=axs[0,1],color='red')
sns.violinplot(data=data,x='temp_min',kde=True,ax=axs[1,0],color='blue')
sns.violinplot(data=data,x='wind',kde=True,ax=axs[1,1],color='orange')

plt.figure(figsize=(12,6))
sns.boxplot(x='precipitation', y='weather', data=data, palette='YlOrBr')
plt.show()

plt.figure(figsize=(12,6))
sns.heatmap(data.corr(),annot=True,cmap='coolwarm')

data.plot("precipitation",'temp_max',style='o')
print('pearsons correlation: ',data['precipitation'].corr(data['temp_max']))
print('T test and P value: ',stats.ttest_ind(data['precipitation'],data['temp_max']))

data.plot("wind",'temp_max',style='o')
print('pearsons correlation: ',data['wind'].corr(data['temp_max']))
print('T test and P value: ',stats.ttest_ind(data['wind'],data['temp_max']))

data.plot('temp_max','temp_min',style='o')

data.isna().sum()

plt.figure(figsize=(12,6))
axz=plt.subplot(1,2,2)
mso.bar(data.drop(['date'],axis=1),ax=axz,fontsize=12)

data=data.drop(['date'],axis=1)

Q1=data.quantile(0.25)
Q3=data.quantile(0.75)
IQR=Q3-Q1
data=data[~((data<(Q1-1.5*IQR))|(data>(Q3+1.5*IQR))).any(axis=1)]

import numpy as np
data.precipitation=np.sqrt(data.precipitation)
data.wind=np.sqrt(data.wind)

sns.histplot(data=data,x="precipitation",kde=True,ax=axs[0,0],color='green')
sns.histplot(data=data,x="temp_max",kde=True,ax=axs[0,1],color='red')
sns.histplot(data=data,x="temp_min",kde=True,ax=axs[1,0],color='blue')
sns.histplot(data=data,x="wind",kde=True,ax=axs[1,1],color='orange')

data.head()

lc=LabelEncoder()
data['weather']=lc.fit_transform(data['weather'])

x=((data.loc[:,data.columns!='weather']).astype(int)).values[:,0:]
y=data['weather'].values

data.weather.unique()

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.1,random_state=2)

knn=KNeighborsClassifier()
knn.fit(x_train,y_train)
print('KNN accuracy:{:.2f}%'.format(knn.score(x_test,y_test)*100))

svm=SVC()
svm.fit(x_train,y_train)
print('SVM accuracy:{:.2f}%'.format(svm.score(x_test,y_test)*100))

gbc=GradientBoostingClassifier(subsample=0.5,n_estimators=450,max_depth=5,max_leaf_nodes=25)
gbc.fit(x_train,y_train)
print('GBC accuracy:{:.2f}%'.format(gbc.score(x_test,y_test)*100))

import warnings
warnings.filterwarnings('ignore')
xgb=XGBClassifier()
xgb.fit(x_train,y_train)
print('XGB accuracy:{:.2f}%'.format(xgb.score(x_test,y_test)*100))

input=[[1.140175,8.9,2.8,2.469818]]
ot=xgb.predict(input)
print('the weather is:')
if(ot==0):
  print('Drizzle')
elif (ot==1):
  print('fogg')
elif (ot==2):
  print('rain')
elif (ot==3):
  print('snow')
else:
  print('sun')